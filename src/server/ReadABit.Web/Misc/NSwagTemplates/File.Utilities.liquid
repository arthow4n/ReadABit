{% if RequiresClientFunctions -%}
{% if Framework.IsAngular -%}
function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
{%     if WrapDtoExceptions -%}
    return {{ Framework.RxJs.ObservableThrowMethod }}(new {{ ExceptionClassName }}(message, status, response, headers, result));
{%     else -%}
    if (result !== null && result !== undefined)
        return {{ Framework.RxJs.ObservableThrowMethod }}(result);
    else
        return {{ Framework.RxJs.ObservableThrowMethod }}(new {{ ExceptionClassName }}(message, status, response, headers, null));
{%     endif -%}
}

{% elseif Framework.IsAngularJS -%}
function throwException(q: ng.IQService, message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): ng.IPromise<any> {
{%     if WrapDtoExceptions -%}
    return q.reject(new {{ ExceptionClassName }}(message, status, response, headers, result));
{%     else -%}
    if (result !== null && result !== undefined)
        return q.reject(result);
    else
        return q.reject(new {{ ExceptionClassName }}(message, status, response, headers, null));
{%     endif -%}
}

{% else -%}
function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    console.error(`Backend.Client.throwException: ${status}, ${result}, ${response}`);
{%     if WrapDtoExceptions -%}
    throw new {{ ExceptionClassName }}(message, status, response, headers, result);
{%     else -%}
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new {{ ExceptionClassName }}(message, status, response, headers, null);
{%     endif -%}
}

{% endif -%}

function tryJsonParse(json: string): any {
    try {
        return JSON.parse(json);
    } catch { }
}

{% if Framework.IsAxios -%}
function isAxiosError(obj: any | undefined): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}

{% endif -%}
{% endif -%}
